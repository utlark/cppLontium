#include <iostream>

#include "GpioDevice.h"
#include "LontiumDevice.h"

const std::vector<uint8_t> lontiumEDID = {
        0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x32, 0x8d, 0x02, 0x2c, 0x01, 0x01, 0x01, 0x01,
        0x01, 0x15, 0x01, 0x03, 0x80, 0x59, 0x32, 0x78, 0x0a, 0x0d, 0xc9, 0xa0, 0x57, 0x47, 0x98, 0x27,
        0x12, 0x48, 0x4c, 0x20, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
        0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02, 0x3a, 0x80, 0x18, 0x71, 0x38, 0x2d, 0x40, 0x58, 0x2c,
        0x45, 0x00, 0xa0, 0x5a, 0x00, 0x00, 0x00, 0x1e, 0x01, 0x1d, 0x00, 0x72, 0x51, 0xd0, 0x1e, 0x20,
        0x6e, 0x28, 0x55, 0x00, 0x76, 0xf2, 0x31, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0xfd, 0x00, 0x30,
        0x3e, 0x1e, 0x46, 0x0f, 0x00, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00, 0xfc,
        0x00, 0x4c, 0x4f, 0x4e, 0x54, 0x49, 0x55, 0x4d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x01, 0xf2,
        0x02, 0x03, 0x21, 0xf1, 0x49, 0x90, 0x1f, 0x05, 0x04, 0x13, 0x14, 0x03, 0x02, 0x01, 0x23, 0x09,
        0x7f, 0x07, 0x83, 0x01, 0x00, 0x00, 0x67, 0x03, 0x0c, 0x00, 0x00, 0x00, 0xb8, 0x2d, 0xe2, 0x00,
        0x0f, 0x01, 0x1d, 0x80, 0x18, 0x71, 0x1c, 0x16, 0x20, 0x58, 0x2c, 0x25, 0x00, 0xc4, 0x8e, 0x21,
        0x00, 0x00, 0x9e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06
};

const std::vector<uint8_t> xgaEDID = {
        0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x05, 0xD7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xFF, 0x23, 0x01, 0x03, 0x80, 0x32, 0x1F, 0x78, 0x07, 0xEE, 0x95, 0xA3, 0x54, 0x4C, 0x99, 0x26,
        0x0F, 0x50, 0x54, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
        0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x64, 0x19, 0x00, 0x40, 0x41, 0x00, 0x26, 0x30, 0x18, 0x88,
        0x36, 0x00, 0x0A, 0xC8, 0x10, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0xFD, 0x00, 0x17, 0xF0, 0x0F,
        0xFF, 0x07, 0x00, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00, 0xFC, 0x00, 0x31,
        0x30, 0x32, 0x34, 0x78, 0x37, 0x36, 0x38, 0x20, 0x58, 0x47, 0x41, 0x0A, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x7A,
        0x02, 0x03, 0x18, 0x40, 0x23, 0x08, 0x00, 0x00, 0x67, 0x03, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x0E,
        0x67, 0xD8, 0x5D, 0xC4, 0x01, 0x0E, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05,
};

void initLontium(LontiumDevice &dev, const std::vector<uint8_t> &edid) {
    if (!dev.checkChipId())
        throw std::runtime_error("Chip ID mismatch");

    dev.setHPD(LontiumDevice::Value::OFF);
    dev.setEDID(edid);
    dev.setHPD(LontiumDevice::Value::ON);

    dev.rxReset();
    dev.lvdsInit();
    dev.lockDetect();
    dev.lvdsSoftReset();
    dev.colorConfig();
}

int main() {
    try {
        GpioDevice resetGpio(154);
        std::this_thread::sleep_for(std::chrono::milliseconds(100));

        resetGpio.setValue(GpioDevice::Value::HIGH);
        std::this_thread::sleep_for(std::chrono::milliseconds(100));

        LontiumDevice slaveDevice("/dev/i2c-2");
        LontiumDevice masterDevice("/dev/i2c-4");

        initLontium(slaveDevice, xgaEDID);
        initLontium(masterDevice, xgaEDID);

    } catch (const std::exception &e) {
        std::cerr << e.what() << "\n";
        return 1;
    }
}
