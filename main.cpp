#include <cstdint>
#include <iostream>
#include <string>
#include <vector>

#include "GpioDevice.h"
#include "LontiumConfig.h"
#include "LontiumDevice.h"

#include "cxxopts.hpp"

struct AppConfig {
    std::string resetPin = "154";
    std::string edid = "1920x1080";
    std::vector<std::string> devices;

    LontiumConfig lontiumConfig;
};

const std::map<std::string, std::vector<uint8_t>> edidMap = {
        {"1920x1080", {
                              0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x05, 0xD7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                              0xFF, 0x23, 0x01, 0x03, 0x80, 0x46, 0x14, 0x78, 0x07, 0xEE, 0x95, 0xA3, 0x54, 0x4C, 0x99, 0x26,
                              0x0F, 0x50, 0x54, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                              0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02, 0x3A, 0x80, 0x18, 0x71, 0x38, 0x2D, 0x40, 0x58, 0x2C,
                              0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0xFD, 0x00, 0x17, 0xF0, 0x0F,
                              0xFF, 0x0F, 0x00, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00, 0xFC, 0x00, 0x48,
                              0x44, 0x54, 0x56, 0x20, 0x31, 0x30, 0x38, 0x30, 0x70, 0x0A, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00,
                              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xD1,
                              0x02, 0x03, 0x16, 0x00, 0x41, 0x90, 0x67, 0x03, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x67, 0xD8,
                              0x5D, 0xC4, 0x01, 0x1E, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81
                      }},
        {"1024x768",  {
                              0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x05, 0xD7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                              0xFF, 0x23, 0x01, 0x03, 0x80, 0x18, 0x12, 0x78, 0x07, 0xEE, 0x95, 0xA3, 0x54, 0x4C, 0x99, 0x26,
                              0x0F, 0x50, 0x54, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
                              0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x64, 0x19, 0x00, 0x40, 0x41, 0x00, 0x26, 0x30, 0x18, 0x88,
                              0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0xFD, 0x00, 0x17, 0xF0, 0x0F,
                              0xFF, 0x07, 0x00, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00, 0xFC, 0x00, 0x31,
                              0x30, 0x32, 0x34, 0x78, 0x37, 0x36, 0x38, 0x20, 0x58, 0x47, 0x41, 0x0A, 0x00, 0x00, 0x00, 0x00,
                              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x83,
                              0x02, 0x03, 0x14, 0x00, 0x67, 0x03, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x67, 0xD8, 0x5D, 0xC4,
                              0x01, 0x0E, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x74
                      }}
};

AppConfig ParseArgs(int argc, char **argv) {
    cxxopts::Options options("lontium-config", "Lontium configurator utility\n");
    options.set_width(100);

    options.add_options()
            ("h,help", "Print usage")
            ("reset-pin", "GPIO pin for reset", cxxopts::value<std::string>()->default_value("154"))
            ("edid", "EDID name: 1920x1080|1024x768", cxxopts::value<std::string>()->default_value("1920x1080"))
            ("dev", "I2C device path, multiple allowed", cxxopts::value<std::vector<std::string>>())
            ("mapping", "LVDS mapping: vesa|jeida", cxxopts::value<std::string>()->default_value("vesa"))
            ("color-depth", "Color depth: 6|8", cxxopts::value<int>()->default_value("8"))
            ("output", "LVDS output enable: on|off", cxxopts::value<std::string>()->default_value("on"))
            ("cp-mode", "Conversion mode: sdtv|sdpc|hdtv|hdpc", cxxopts::value<std::string>()->default_value("hdtv"))
            ("channel-width", "LVDS channel width: single|dual", cxxopts::value<std::string>()->default_value("dual"))
            ("sync", "Sync mode: de|sync", cxxopts::value<std::string>()->default_value("sync"))
            ("cd-swap", "Channel-port swap: on|off", cxxopts::value<std::string>()->default_value("off"))
            ("rb-swap", "Red-blue swap: on|off", cxxopts::value<std::string>()->default_value("off"));

    auto parse = options.parse(argc, argv);

    if (parse.count("help")) {
        std::cout << options.help() << std::endl;
        std::cout << std::endl << "Example: " << argv[0] << " --dev=/dev/i2c-1 --devt=/dev/i2c-2" << std::endl;
        std::exit(1);
    }

    AppConfig config;
    config.resetPin = parse["reset-pin"].as<std::string>();
    if (std::stoi(config.resetPin) < 0)
        throw std::invalid_argument("Invalid reset pin: " + config.resetPin + ". Allowed: integer > 0");

    config.edid = parse["edid"].as<std::string>();
    if (edidMap.find(config.edid) == edidMap.end())
        throw std::invalid_argument("Invalid edid: " + config.edid + ". Allowed: 1920x1080|1024x768");

    if (!parse.count("dev")) {
        std::cerr << "Error: '--dev' is required" << std::endl;
        std::cout << options.help() << std::endl;
        std::exit(1);
    }
    if (parse.count("dev"))
        config.devices = parse["dev"].as<std::vector<std::string>>();

    config.lontiumConfig.lvdsMap = LontiumConfig::strToMap(parse["mapping"].as<std::string>());
    config.lontiumConfig.lvdsOutput = LontiumConfig::strToOutput(parse["output"].as<std::string>());
    config.lontiumConfig.cpConvertMode = LontiumConfig::strToCP(parse["cp-mode"].as<std::string>());
    config.lontiumConfig.channelWidth = LontiumConfig::strToChannel(parse["channel-width"].as<std::string>());
    config.lontiumConfig.syncMode = LontiumConfig::strToSync(parse["sync"].as<std::string>());
    config.lontiumConfig.colorDepth = LontiumConfig::strToColorDepth(parse["color-depth"].as<std::string>());
    config.lontiumConfig.cDPortSwap = LontiumConfig::strToCD(parse["cd-swap"].as<std::string>());
    config.lontiumConfig.rBColorSwap = LontiumConfig::strToRB(parse["rb-swap"].as<std::string>());

    return config;
}

void InitLontium(LontiumDevice &dev, const std::vector<uint8_t> &edid) {
    if (!dev.CheckChipId())
        throw std::runtime_error("Chip ID mismatch");

    dev.SetHPD(LontiumDevice::Value::OFF);
    dev.SetEDID(edid);
    dev.SetHPD(LontiumDevice::Value::ON);

    dev.RxReset();
    dev.LvdsInit();
    dev.LockDetect();
    dev.LvdsSoftReset();
    dev.ColorConfig();
}

int main(int argc, char **argv) {
    try {
        AppConfig appConfig = ParseArgs(argc, argv);

        GpioDevice resetGpio(appConfig.resetPin);
        resetGpio.SetValue(GpioDevice::Value::HIGH);

        auto &edid = edidMap.at(appConfig.edid);
        for (auto &devPath: appConfig.devices) {
            std::cout << "Init device: " << devPath << " with EDID=" << appConfig.edid << std::endl;
            LontiumDevice dev(devPath, appConfig.lontiumConfig);
            InitLontium(dev, edid);
        }
    } catch (const std::exception &e) {
        std::cerr << "Error: " << e.what() << std::endl;
        return 1;
    }
    return 0;
}
